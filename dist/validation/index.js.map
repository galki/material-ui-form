{"version":3,"sources":["../../src/validation/index.js"],"names":["sprintf","str","args","predicate","_","isString","isObject","isArray","Object","values","match","number","undefined","join","replace","validationMessageMap","clone","messageMap","createValidation","validatorName","config","isEmpty","code","startsWith","messageMapKeyPrefix","prefixedCode","has","message","isNumber","validate","value","fieldValidators","validations","console","error","forEach","validator","size","keys","validators","String","validation","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;;;AAHuB;AAQvB,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,SAAJ;;AACA,MAAIC,gBAAEC,QAAF,CAAWH,IAAX,CAAJ,EAAsB;AACpBC,gBAAYD,IAAZ;AACD,GAFD,MAEO,IAAIE,gBAAEE,QAAF,CAAWJ,IAAX,KAAoB,CAACE,gBAAEG,OAAF,CAAUL,IAAV,CAAzB,EAA0C;AAC/CA,WAAOM,OAAOC,MAAP,CAAcP,IAAd,CAAP;;AACAC,gBAAY,mBAACO,KAAD,EAAQC,MAAR;AAAA,aACVT,KAAKS,MAAL,MAAiBC,SAAjB,GAA6BV,KAAKS,MAAL,CAA7B,GAA4CD,KADlC;AAAA,KAAZ;AAGD,GALM,MAKA;AACLP,gBAAY,mBAACO,KAAD,EAAQC,MAAR;AAAA,aACV;AACAT,aAAKS,MAAL,MAAiBC,SAAjB,GACKR,gBAAEG,OAAF,CAAUL,IAAV,IAAkBA,KAAKW,IAAL,CAAU,IAAV,CAAlB,GAAoCX,KAAKS,MAAL,CADzC,GAEID;AAJM;AAAA,KAAZ;AAMD;;AACD,SAAOT,IAAIa,OAAJ,CAAY,UAAZ,EAAwBX,SAAxB,CAAP;AACD;;AAED,IAAIY,uBAAuBX,gBAAEY,KAAF,CAAQC,mBAAR,CAA3B;;AAEO,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,aAAD,EAAgBjB,IAAhB,EAAsBkB,MAAtB,EAAiC;AAC/D,MAAI,CAAChB,gBAAEiB,OAAF,CAAUD,OAAOH,UAAjB,CAAL,EAAmC;AACjCF,2BAAuBK,OAAOH,UAA9B;AACD;;AAED,MAAIK,OAAOH,aAAX,CAL+D,CAM/D;;AACA,MAAI,CAACA,cAAcI,UAAd,CAAyBH,OAAOI,mBAAhC,CAAL,EAA2D;AACzD,QAAMC,yBAAkBL,OAAOI,mBAAzB,SAA+CL,aAA/C,CAAN;;AACA,QAAIf,gBAAEsB,GAAF,CAAMX,oBAAN,EAA4BU,YAA5B,CAAJ,EAA+C;AAC7CH,aAAOG,YAAP;AACD;AACF;;AAED,MAAIE,UAAUZ,qBAAqBO,IAArB,CAAd;;AACA,MAAIK,YAAYf,SAAZ,KAA0BR,gBAAEwB,QAAF,CAAW1B,IAAX,KAAoB,CAACE,gBAAEiB,OAAF,CAAUnB,IAAV,CAA/C,CAAJ,EAAqE;AACnEyB,cAAU3B,QAAQ2B,OAAR,EAAiBzB,IAAjB,CAAV;AACD;;AACD,SAAO;AAAEoB,cAAF;AAAQK;AAAR,GAAP;AACD,CAnBM;;;;AAqBA,IAAME,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAQC,eAAR,EAAyBX,MAAzB,EAAoC;AAC1D,MAAMY,cAAc,EAApB;;AACA,MAAI5B,gBAAEiB,OAAF,CAAUU,eAAV,CAAJ,EAAgC;AAC9B,WAAO,EAAP;AACD,GAFD,MAEO,IAAI,CAAC3B,gBAAEG,OAAF,CAAUwB,eAAV,CAAL,EAAiC;AACtC;AACAE,YAAQC,KAAR,CAAc,4BAAd,EAA4CH,eAA5C;AACA,WAAO,KAAP;AACD;;AAEDA,kBAAgBI,OAAhB,CAAwB,UAACC,SAAD,EAAe;AACrC,QAAIlC,IAAJ;AACA,QAAIiB,gBAAgBiB,SAApB;;AACA,QAAIhC,gBAAEE,QAAF,CAAW8B,SAAX,KAAyBhC,gBAAEiC,IAAF,CAAOD,SAAP,MAAsB,CAAnD,EAAsD;AACpDlC,aAAOM,OAAOC,MAAP,CAAc2B,SAAd,EAAyB,CAAzB,CAAP,CADoD,CACjB;;AACnCjB,sBAAgBX,OAAO8B,IAAP,CAAYF,SAAZ,EAAuB,CAAvB,CAAhB,CAFoD,CAEV;AAC3C,KAHD,MAGO,IAAI,CAAChC,gBAAEC,QAAF,CAAW+B,SAAX,CAAL,EAA4B;AACjCH,cAAQC,KAAR,CAAc,oBAAd,EAAoCE,SAApC,EADiC,CACc;AAChD;;AAED,QAAIhB,OAAOmB,UAAP,CAAkBpB,aAAlB,MAAqCP,SAAzC,EAAoD;AAClDqB,cAAQC,KAAR,CAAc,sBAAd,EAAsCf,aAAtC,EADkD,CACG;AACtD,KAFD,MAEO;AACLW,cAAQU,OAAOV,KAAP,CAAR;AACA,UAAMW,aAAarB,OAAOmB,UAAP,CAAkBpB,aAAlB,EAAiCW,KAAjC,EAAwC5B,IAAxC,CAAnB;;AACA,UAAI,CAACuC,UAAL,EAAiB;AACfT,oBAAYU,IAAZ,CAAiBxB,iBAAiBC,aAAjB,EAAgCjB,IAAhC,EAAsCkB,MAAtC,CAAjB;AACD;AACF;AACF,GAnBD;AAqBA,SAAOY,WAAP;AACD,CAhCM","sourcesContent":["import _ from 'lodash' // eslint-disable-line import/no-extraneous-dependencies\n\nimport messageMap from './messageMap'\nimport validators from './validators'\n\nexport constants from './constants'\n\n\nfunction sprintf(str, args) {\n  let predicate\n  if (_.isString(args)) {\n    predicate = args\n  } else if (_.isObject(args) && !_.isArray(args)) {\n    args = Object.values(args)\n    predicate = (match, number) => (\n      args[number] !== undefined ? args[number] : match\n    )\n  } else {\n    predicate = (match, number) => (\n      // eslint-disable-next-line no-nested-ternary\n      args[number] !== undefined\n        ? (_.isArray(args) ? args.join(', ') : args[number])\n        : match\n    )\n  }\n  return str.replace(/{(\\d+)}/g, predicate)\n}\n\nlet validationMessageMap = _.clone(messageMap)\n\nexport const createValidation = (validatorName, args, config) => {\n  if (!_.isEmpty(config.messageMap)) {\n    validationMessageMap = config.messageMap\n  }\n\n  let code = validatorName\n  // first check if prefix code exists\n  if (!validatorName.startsWith(config.messageMapKeyPrefix)) {\n    const prefixedCode = `${config.messageMapKeyPrefix}${validatorName}`\n    if (_.has(validationMessageMap, prefixedCode)) {\n      code = prefixedCode\n    }\n  }\n\n  let message = validationMessageMap[code]\n  if (message !== undefined && (_.isNumber(args) || !_.isEmpty(args))) {\n    message = sprintf(message, args)\n  }\n  return { code, message }\n}\n\nexport const validate = (value, fieldValidators, config) => {\n  const validations = []\n  if (_.isEmpty(fieldValidators)) {\n    return []\n  } else if (!_.isArray(fieldValidators)) {\n    // eslint-disable-next-line no-console\n    console.error('invalid validators format:', fieldValidators)\n    return false\n  }\n\n  fieldValidators.forEach((validator) => {\n    let args\n    let validatorName = validator\n    if (_.isObject(validator) && _.size(validator) === 1) {\n      args = Object.values(validator)[0] // eslint-disable-line prefer-destructuring\n      validatorName = Object.keys(validator)[0] // eslint-disable-line prefer-destructuring\n    } else if (!_.isString(validator)) {\n      console.error('invalid validator:', validator) // eslint-disable-line\n    }\n\n    if (config.validators[validatorName] === undefined) {\n      console.error('undefined validator:', validatorName) // eslint-disable-line\n    } else {\n      value = String(value)\n      const validation = config.validators[validatorName](value, args)\n      if (!validation) {\n        validations.push(createValidation(validatorName, args, config))\n      }\n    }\n  })\n\n  return validations\n}\n\nexport {\n  messageMap,\n  validators,\n}\n"],"file":"index.js"}