{"version":3,"sources":["../../src/components/FieldClone.js"],"names":["getRequiredProp","required","useNativeRequiredValidator","makeLabel","fieldComp","props","label","field","isRequired","makeErrorAndHelperText","helperText","_","get","isError","isEmpty","validations","length","message","FieldClone","type","name","undefined","Error","value","state","onConstruct","nextProps","setState","React","cloneElement","error","onBlur","onChange","Component","PropTypes","object","onValueChange","func","bool","event","target","select"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash' // eslint-disable-line import/no-extraneous-dependencies\n\n\nfunction getRequiredProp(required, useNativeRequiredValidator) {\n  if (!useNativeRequiredValidator) {\n    return false\n  }\n  return required\n}\n\nfunction makeLabel(fieldComp, props) {\n  const label = fieldComp.props.label || ''\n  return props.field.isRequired && !props.useNativeRequiredValidator\n    ? `${label} *`\n    : label\n}\n\nfunction makeErrorAndHelperText(props) {\n  let helperText = _.get(props.fieldComp.props, 'helperText')\n  let isError = false\n\n  if (!_.isEmpty(props.field) && props.field.validations.length > 0) {\n    helperText = props.field.validations[0].message\n    isError = true\n  }\n  return { helperText, isError }\n}\n\nexport default class FieldClone extends React.Component {\n  static propTypes = {\n    field: PropTypes.object,\n    fieldComp: PropTypes.object.isRequired,\n    onValueChange: PropTypes.func.isRequired,\n    onConstruct: PropTypes.func.isRequired,\n    useNativeRequiredValidator: PropTypes.bool.isRequired,\n  }\n\n  static defaultProps = {\n    field: {},\n  }\n\n  constructor(props) {\n    super(props)\n    const { fieldComp } = props\n\n    if (fieldComp.type.name === undefined) {\n      throw new Error('FieldClone does not support native elements')\n    }\n    if (fieldComp.props.name === undefined || fieldComp.props.value === undefined) {\n      throw new Error('FieldClone name and value must be defined')\n    }\n\n    const value = _.isEmpty(props.field) ? fieldComp.props.value : props.field.value\n    const { helperText, isError } = makeErrorAndHelperText(props)\n\n    this.state = {\n      helperText,\n      isError,\n      value,\n    }\n\n    if (props.field.value === undefined) {\n      this.props.onConstruct(fieldComp.props)\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!_.isEmpty(nextProps.field)) {\n      const { helperText, isError } = makeErrorAndHelperText(nextProps)\n      this.setState({\n        helperText,\n        isError,\n        value: nextProps.field.value,\n      })\n    }\n  }\n\n  onBlur = (event) => {\n    const { fieldComp, fieldComp: { props: { name } } } = this.props\n    const { value } = event.target\n    // // /* TODO: create function for condition */\n    if (!fieldComp.props.select) {\n      this.props.onValueChange(name, value)\n    }\n    if (fieldComp.props.onBlur !== undefined) {\n      fieldComp.props.onBlur(value, { name }, event)\n    }\n  }\n\n  onChange = (event) => {\n    const { fieldComp, fieldComp: { props: { name } } } = this.props\n    const { value } = event.target\n    const helperText = _.get(fieldComp.props, 'helperText')\n    this.setState({ isError: false, helperText, value })\n    /* TODO: create function for condition */\n    if (fieldComp.props.select) {\n      this.props.onValueChange(name, value)\n    }\n    if (fieldComp.props.onChange !== undefined) {\n      fieldComp.props.onChange(value, { name }, event)\n    }\n  }\n\n  render() {\n    const { fieldComp, ...props } = this.props\n    return React.cloneElement(fieldComp, {\n      value: this.state.value,\n      label: makeLabel(fieldComp, props),\n      error: this.state.isError,\n      helperText: this.state.helperText,\n      onBlur: this.onBlur,\n      onChange: this.onChange,\n      required: getRequiredProp(\n        fieldComp.props.required,\n        this.props.useNativeRequiredValidator\n      ),\n    })\n  }\n}\n"],"file":"FieldClone.js"}