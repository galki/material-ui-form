{"version":3,"sources":["../../src/components/Form.js"],"names":["FIELD_VALIDATORS_PROP_NAME","checkElementInteractivity","component","whitelist","FormControlLabel","includes","type","_","has","isValidForm","fields","size","filter","field","validations","length","getFieldValues","values","each","name","get","value","getPristineFieldValues","isPristine","pristineValue","extractFieldValidators","fieldProps","validators","undefined","isString","replace","split","isArray","getFieldTemplate","isRequired","Form","props","checked","required","defer","setState","state","isBoolean","requiredValidatorName","validation","isEmpty","unshift","validateField","enableSubmitButton","onValuesChange","validate","disableSubmitButton","event","preventDefault","isValid","onSubmit","Object","assign","messageMap","messageMapKeyPrefix","validationConstants","REQUIRED_VALIDATOR_NAME","defaultValidators","nextProps","console","warn","disableSubmitButtonOnError","children","React","Children","map","child","isInteractiveElement","nestedChildren","isObject","v","FormControl","fieldElement","find","FormLabel","InputLabel","FormHelperText","el","onFieldConstruct","onFieldValueChange","cloneElement","cloneChildrenRecursively","disabled","control","label","onFieldToggle","Checkbox","Switch","reset","submit","autoComplete","Component","PropTypes","string","array","bool","func","shape","object","oneOfType"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash' // eslint-disable-line import/no-extraneous-dependencies\n\nimport {\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n} from 'material-ui/Form'\nimport { InputLabel } from 'material-ui/Input'\nimport Checkbox from 'material-ui/Checkbox'\nimport Switch from 'material-ui/Switch'\n\nimport FormControlClone from './FormControlClone'\nimport FormControlLabelClone from './FormControlLabelClone'\nimport FieldClone from './FieldClone'\nimport CheckableFieldClone from './CheckableFieldClone'\nimport {\n  messageMap,\n  validate,\n  validators as defaultValidators,\n  constants as validationConstants,\n} from '../validation'\n\n\nconst FIELD_VALIDATORS_PROP_NAME = 'data-validators'\n\nfunction checkElementInteractivity(component) {\n  const whitelist = [\n    FormControlLabel,\n  ]\n\n  return whitelist.includes(component.type)\n   || (_.has(component, 'props.name') && _.has(component, 'props.value'))\n}\n\nfunction isValidForm(fields) {\n  return _.size(_.filter(fields, field => field.validations.length > 0)) === 0\n}\n\nfunction getFieldValues(fields) {\n  const values = {}\n  _.each(fields, (field, name) => {\n    if (_.get(field, 'checked') !== false) {\n      values[name] = field.value\n    }\n  })\n  return values\n}\n\nfunction getPristineFieldValues(fields) {\n  const values = {}\n  _.each(fields, (field, name) => {\n    if (!field.isPristine && _.get(field, 'checked') !== false) {\n      values[name] = field.pristineValue\n    }\n  })\n  return values\n}\n\nfunction extractFieldValidators(fieldProps) {\n  let validators = _.get(fieldProps, FIELD_VALIDATORS_PROP_NAME)\n  if (validators !== undefined) {\n    if (_.isString(validators)) {\n      validators = validators.replace(/\\s/g, '').split(',')\n    } else if (!_.isArray(validators)) {\n      validators = [validators]\n    }\n    return validators\n  }\n  return []\n}\n\nfunction getFieldTemplate() {\n  return {\n    isPristine: true,\n    isRequired: null,\n    pristineValue: null,\n    validations: [],\n    validators: [],\n    value: undefined,\n  }\n}\n\nexport default class Form extends React.Component {\n  static propTypes = {\n    autoComplete: PropTypes.string,\n    children: PropTypes.array.isRequired,\n    disableSubmitButtonOnError: PropTypes.bool,\n    onSubmit: PropTypes.func.isRequired,\n    onValuesChange: PropTypes.func,\n    validation: PropTypes.shape({\n      messageMap: PropTypes.object,\n      messageMapKeyPrefix: PropTypes.string,\n      requiredValidatorName: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n      ]),\n      validators: PropTypes.object,\n      validate: PropTypes.func,\n    }),\n    validations: PropTypes.object,\n  }\n\n  static defaultProps = {\n    autoComplete: 'off',\n    disableSubmitButtonOnError: true,\n    onValuesChange: null,\n    validation: {},\n    validations: {},\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.validation = Object.assign({\n      messageMap,\n      messageMapKeyPrefix: '',\n      requiredValidatorName: validationConstants.REQUIRED_VALIDATOR_NAME,\n      validators: defaultValidators,\n      validate,\n    }, props.validation)\n\n    this.state = {\n      disableSubmitButton: false,\n      fields: {},\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { fields } = this.state\n    _.each(nextProps.validations, (validations, name) => {\n      if (_.has(fields, name)) {\n        fields[name].validations = validations\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`validations field \"${name}\" does not exist`)\n      }\n    })\n    this.setState({ fields })\n  }\n\n  onFieldConstruct = (fieldProps) => {\n    const {\n      checked,\n      name,\n      required,\n      value,\n    } = fieldProps\n\n    // checkable input\n    if (checked === true) {\n      _.defer(() => {\n        this.setState({\n          fields: {\n            ...this.state.fields,\n            [name]: {\n              ...getFieldTemplate(),\n              checked: checked || false,\n              value,\n            },\n          },\n        })\n      })\n    // other inputs\n    } else if (!_.isBoolean(checked)) {\n      const { requiredValidatorName } = this.validation\n      if (!_.has(this.state.fields, name)) {\n        const validators = extractFieldValidators(fieldProps)\n\n        if (required && !_.isEmpty(requiredValidatorName)) {\n          validators.unshift(requiredValidatorName)\n        }\n        const isRequired = required || validators.includes(requiredValidatorName)\n\n        // set any validations on first construct\n        let validations = []\n        if (!_.has(this.state.fields, name)\n          && _.has(this.props.validations, name)\n        ) {\n          validations = this.props.validations[name]\n        }\n\n        _.defer(() => {\n          this.setState({\n            fields: {\n              ...this.state.fields,\n              [name]: {\n                ...getFieldTemplate(),\n                isRequired,\n                pristineValue: value,\n                validators,\n                validations,\n                value,\n              },\n            },\n          })\n\n          if (!_.isEmpty(value)) {\n            this.validateField(name, value)\n          }\n        })\n      }\n    }\n  }\n\n  onFieldValueChange = (name, value) => {\n    _.defer(() => {\n      this.setState({\n        fields: {\n          ...this.state.fields,\n          [name]: {\n            ...this.state.fields[name],\n            isPristine: false,\n            validations: [],\n            value,\n          },\n        },\n      })\n\n      if (isValidForm(this.state.fields)) {\n        this.enableSubmitButton()\n        if (this.props.onValuesChange !== null) {\n          this.props.onValuesChange(\n            getFieldValues(this.state.fields),\n            getPristineFieldValues(this.state.fields)\n          )\n        }\n      }\n\n      this.validateField(name, value)\n    })\n  }\n\n  onFieldToggle = (name, value, checked) => {\n    this.setState({\n      fields: {\n        ...this.state.fields,\n        [name]: {\n          ...this.state.fields[name],\n          checked,\n          isPristine: false,\n          validations: [],\n          value,\n        },\n      },\n    })\n  }\n\n  validateField = (name, value) => {\n    const field = this.state.fields[name]\n    if (!_.isEmpty(field.validators)) {\n      const { validation } = this\n      const validations = validation.validate(value, field.validators, validation)\n\n      field.validations = validations\n      this.setState({\n        fields: {\n          ...this.state.fields,\n          [name]: field,\n        },\n      })\n\n      if (!_.isEmpty(validations)) {\n        this.disableSubmitButton()\n      }\n    }\n  }\n\n  reset = () => {\n    const { fields } = this.state\n    _.defer(() => {\n      _.each(fields, (field, name) => {\n        this.setState({\n          fields: {\n            ...this.state.fields,\n            [name]: {\n              ...this.state.fields[name],\n              value: '',\n            },\n          },\n        })\n      })\n    })\n  }\n\n  submit = (event) => {\n    event.preventDefault()\n    let isValid = true\n    const { fields } = this.state\n    _.each(fields, (field, name) => {\n      if (field.isRequired && field.value === '') {\n        this.validateField(name, '')\n        isValid = false\n      }\n    })\n    if (isValid) {\n      this.props.onSubmit(\n        getFieldValues(fields),\n        getPristineFieldValues(fields)\n      )\n    }\n  }\n\n  enableSubmitButton() {\n    if (this.state.disableSubmitButton) {\n      this.setState({ disableSubmitButton: false })\n    }\n  }\n\n  disableSubmitButton() {\n    if (this.props.disableSubmitButtonOnError) {\n      this.setState({ disableSubmitButton: true })\n    }\n  }\n\n  cloneChildrenRecursively(children) {\n    return React.Children.map(children, (child) => {\n      if (_.isEmpty(child)) {\n        return null\n      }\n      if (_.isString(child)) {\n        return child\n      }\n\n      const isInteractiveElement = checkElementInteractivity(child)\n      const nestedChildren = _.isArray(child.props.children) && !isInteractiveElement\n        ? _.filter(child.props.children, v => (_.isObject(v) || _.isString(v)))\n        : false\n\n      // nested elements\n      if (nestedChildren !== false) {\n        // FormControl element with field/group name-value props\n        if (child.type === FormControl) {\n          const fieldElement = nestedChildren.find(el =>\n            ![FormLabel, InputLabel, FormHelperText].includes(el.type)\n            && el.props.name !== undefined\n            && el.props.value !== undefined)\n          if (fieldElement !== undefined) {\n            const { name } = fieldElement.props\n            return (\n              <FormControlClone\n                key={name}\n                field={this.state.fields[name]}\n                formControlElement={child}\n                onConstruct={this.onFieldConstruct}\n                onValueChange={this.onFieldValueChange}\n              />\n            )\n          }\n        }\n        // non-FormControl element\n        return (\n          React.cloneElement(child, {\n            children: this.cloneChildrenRecursively(nestedChildren),\n          })\n        )\n      }\n      // add disable functionality to submit button\n      if (child.props.type === 'submit') {\n        return React.cloneElement(child, {\n          disabled: this.state.disableSubmitButton,\n        })\n      // non-interactive elements should be rendered as is\n      } else if (!isInteractiveElement) {\n        return child\n      }\n      // clone control label\n      if (child.type === FormControlLabel) {\n        const { name } = child.props.control.props\n        return (\n          <FormControlLabelClone\n            key={name}\n            field={this.state.fields[name]}\n            control={child.props.control}\n            label={child.props.label}\n            onConstruct={this.onFieldConstruct}\n            onToggle={this.onFieldToggle}\n          />\n        )\n      }\n      // clone input element\n      const { name } = child.props\n\n      // checkable\n      if (child.type === Checkbox || child.type === Switch) {\n        return (\n          <CheckableFieldClone\n            key={name}\n            field={this.state.fields[name]}\n            fieldComp={child}\n            onConstruct={this.onFieldConstruct}\n            onToggle={this.onFieldToggle}\n          />\n        )\n      }\n\n      return (\n        <FieldClone\n          key={name}\n          field={this.state.fields[name]}\n          fieldComp={child}\n          onConstruct={this.onFieldConstruct}\n          onValueChange={this.onFieldValueChange}\n          useNativeRequiredValidator={!this.validation.requiredValidatorName}\n        />\n      )\n    })\n  }\n\n  render() {\n    return (\n      <form\n        onReset={this.reset}\n        onSubmit={this.submit}\n        autoComplete={this.props.autoComplete}\n      >\n        { this.cloneChildrenRecursively(this.props.children) }\n      </form>\n    )\n  }\n}\n"],"file":"Form.js"}