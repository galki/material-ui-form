{"version":3,"sources":["../../src/components/FormControlLabelClone.js"],"names":["FormControlLabelClone","props","Checkbox","Switch","includes","control","type","Error","checked","value","field","undefined","onConstruct","_","get","state","label","onChange","onToggle","controlOptions","React","cloneElement","Component","PropTypes","object","isRequired","string","func","event","name","setState"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;IAGqBA,qB;;;;;AAcnB,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,0IAAMA,KAAN;;AADiB;;AAGjB,QAAI,CAAC,CAACC,iBAAD,EAAWC,eAAX,EAAmBC,QAAnB,CAA4BH,MAAMI,OAAN,CAAcC,IAA1C,CAAL,EAAsD;AACpD,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AALgB,QAOXC,OAPW,GAOCP,MAAMI,OAAN,CAAcJ,KAPf,CAOXO,OAPW;AAAA,QAQTC,KARS,GAQCR,MAAMI,OAAN,CAAcJ,KARf,CAQTQ,KARS;;AAUjB,QAAIR,MAAMS,KAAN,CAAYD,KAAZ,KAAsBE,SAA1B,EAAqC;AACnCV,YAAMW,WAAN,CAAkBX,MAAMI,OAAN,CAAcJ,KAAhC;AACD,KAFD,MAEO;AACLO,gBAAUK,gBAAEC,GAAF,CAAMb,MAAMS,KAAZ,EAAmB,SAAnB,CAAV;AACD;;AAED,UAAKK,KAAL,GAAa;AACXP,sBADW;AAEXC;AAFW,KAAb;AAhBiB;AAoBlB;;;;6BAWQ;AAAA,mBACoB,KAAKR,KADzB;AAAA,UACCI,OADD,UACCA,OADD;AAAA,UACUW,KADV,UACUA,KADV;AAEP,UAAMC,WACJZ,QAAQJ,KAAR,CAAcgB,QAAd,IAA0BZ,QAAQJ,KAAR,CAAciB,QAAxC,IAAoD,KAAKA,QAD3D;AAGA,UAAMC,iBAAiB;AACrBX,iBAAS,KAAKO,KAAL,CAAWP,OADC;AAErBS,0BAFqB;AAGrBR,eAAO,KAAKM,KAAL,CAAWN;AAHG,OAAvB;AAMA,aACE,6BAAC,sBAAD;AACE,iBAAS,KAAKM,KAAL,CAAWP,OADtB;AAEE,iBAASY,eAAMC,YAAN,CAAmBhB,OAAnB,EAA4Bc,cAA5B,CAFX;AAGE,kBAAUF,QAHZ;AAIE,eAAOD,KAJT;AAKE,eAAO,KAAKD,KAAL,CAAWN;AALpB,QADF;AASD;;;;EAjEgDW,eAAME,S;;;sBAApCtB,qB;;;;SACA;AACjB;AACAK,aAASkB,mBAAUC,MAAV,CAAiBC,UAFT;AAGjBf,WAAOa,mBAAUC,MAHA;AAIjBR,WAAOO,mBAAUG,MAAV,CAAiBD,UAJP;AAKjBP,cAAUK,mBAAUI,IAAV,CAAeF,UALR;AAMjBb,iBAAaW,mBAAUI,IAAV,CAAeF;AANX;;sBADAzB,qB;;;;SAUG;AACpBU,WAAO;AADa;;;;;;;;;;WA0BX,eAACkB,KAAD,EAAQpB,OAAR,EAAoB;AAC7BA,gBAAUK,gBAAEC,GAAF,CAAMc,KAAN,EAAa,gBAAb,KAAkCpB,OAA5C;AAD6B,UAEvBC,KAFuB,GAEb,OAAKR,KAAL,CAAWI,OAAX,CAAmBJ,KAFN,CAEvBQ,KAFuB,EAEY;;AAFZ,UAGrBoB,IAHqB,GAGZ,OAAK5B,KAAL,CAAWI,OAAX,CAAmBJ,KAHP,CAGrB4B,IAHqB,EAGa;;AAC1CpB,cAAQD,UAAUC,KAAV,GAAkB,EAA1B;;AACA,aAAKqB,QAAL,CAAc;AAAEtB,wBAAF;AAAWC;AAAX,OAAd;;AACA,aAAKR,KAAL,CAAWiB,QAAX,CAAoBW,IAApB,EAA0BpB,KAA1B,EAAiCD,OAAjC;AACD","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash' // eslint-disable-line import/no-extraneous-dependencies\n\nimport Checkbox from 'material-ui/Checkbox'\nimport Switch from 'material-ui/Switch'\nimport { FormControlLabel } from 'material-ui/Form'\n\n\nexport default class FormControlLabelClone extends React.Component {\n  static propTypes = {\n    /* eslint-disable-next-line */\n    control: PropTypes.object.isRequired,\n    field: PropTypes.object,\n    label: PropTypes.string.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    onConstruct: PropTypes.func.isRequired,\n  }\n\n  static defaultProps = {\n    field: {},\n  }\n\n  constructor(props) {\n    super(props)\n\n    if (![Checkbox, Switch].includes(props.control.type)) {\n      throw new Error('invalid FormControlLabel control component')\n    }\n\n    let { checked } = props.control.props\n    const { value } = props.control.props\n\n    if (props.field.value === undefined) {\n      props.onConstruct(props.control.props)\n    } else {\n      checked = _.get(props.field, 'checked')\n    }\n\n    this.state = {\n      checked,\n      value,\n    }\n  }\n\n  onToggle = (event, checked) => {\n    checked = _.get(event, 'target.checked') || checked\n    let { value } = this.props.control.props // eslint-disable-line react/prop-types\n    const { name } = this.props.control.props // eslint-disable-line react/prop-types\n    value = checked ? value : ''\n    this.setState({ checked, value })\n    this.props.onToggle(name, value, checked)\n  }\n\n  render() {\n    const { control, label } = this.props\n    const onChange = (\n      control.props.onChange || control.props.onToggle || this.onToggle\n    )\n    const controlOptions = {\n      checked: this.state.checked,\n      onChange,\n      value: this.state.value,\n    }\n\n    return (\n      <FormControlLabel\n        checked={this.state.checked}\n        control={React.cloneElement(control, controlOptions)}\n        onChange={onChange}\n        label={label}\n        value={this.state.value}\n      />\n    )\n  }\n}\n"],"file":"FormControlLabelClone.js"}